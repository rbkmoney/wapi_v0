[
    {kernel, [
        {log_level, info},
        {logger, [
            {handler, default, logger_std_h, #{
                level => debug,
                config => #{
                    type => {file, "/var/log/wapi-v0/console.json"},
                    sync_mode_qlen => 20
                },
                formatter => {logger_logstash_formatter, #{}}
            }}
        ]}
    ]},

    {scoper, [
        {storage, scoper_storage_logger}
    ]},

    {dmt_client, [
        {cache_update_interval, 5000}, % milliseconds
        {max_cache_size, #{
            elements => 20,
            memory => 52428800 % 50Mb
        }},
        {woody_event_handlers, [
            {scoper_woody_event_handler, #{
                event_handler_opts => #{
                    formatter_opts => #{
                        max_length => 1000
                    }
                }
            }}
        ]},
        {service_urls, #{
            'Repository'       => <<"http://dominant:8022/v1/domain/repository">>,
            'RepositoryClient' => <<"http://dominant:8022/v1/domain/repository_client">>
        }}
    ]},

    %% wapi
    {wapi, [
        {ip, "::"},
        {port, 8080},
        %% To send ASCII text in 5xx replies
        %% {oops_bodies, #{
        %%     500 => "oops_bodies/500_body"
        %% }},
        {realm, <<"external">>},
        {transport, thrift},
        {public_endpoint, <<"http://wapi">>},
        {access_conf, #{
            jwt => #{
                keyset => #{
                    wapi     => {pem_file, "var/keys/wapi-v0/private.pem"}
                }
            }
        }},
        {signee, wapi},
        {health_check, #{
            service => {erl_health, service  , [<<"wapi-v0">>]}
        }},
        {max_request_deadline, 60000}, % milliseconds
        {file_storage_url_lifetime, 60}, % seconds
        {events_fetch_limit, 50},
        {lechiffre_opts,  #{
            encryption_source => {json, {file, <<"path/to/pub.secret">>}},
            decryption_sources => [{json, {file, <<"path/to/priv.secret">>}}]
        }}
    ]},

    {wapi_woody_client, [
        {service_urls, #{
            webhook_manager         => "http://hooker:8022/hook",
            cds_storage             => "http://cds:8022/v1/storage",
            identdoc_storage        => "http://cds:8022/v1/identity_document_storage",
            fistful_stat            => "http://fistful-magista:8022/stat",
            fistful_wallet          => "http://fistful:8022/v1/wallet",
            fistful_identity        => "http://fistful:8022/v1/identity",
            fistful_destination     => "http://fistful:8022/v1/destination",
            fistful_withdrawal      => "http://fistful:8022/v1/withdrawal",
            fistful_w2w_transfer    => "http://fistful:8022/v1/w2w_transfer",
            fistful_p2p_template    => "http://fistful:8022/v1/p2p_template",
            fistful_p2p_transfer    => "http://fistful:8022/v1/p2p_transfer",
            fistful_p2p_session     => "http://fistful:8022/v1/p2p_transfer/session"
        }},
        {api_deadlines, #{
            wallet   => 5000 % millisec
        }},
        {service_retries, #{
            party_management    => #{
            % function => retry strategy
            % '_' work as "any"
            % default value is 'finish'
            % for more info look genlib_retry :: strategy()
            % https://github.com/rbkmoney/genlib/blob/master/src/genlib_retry.erl#L19
                'Get'   => {linear, 3, 1000},
                '_'     => finish
            }
        }}
    ]},

    {snowflake, [
       % {machine_id, 42}
    ]},

    {bender_client, [
        {services, #{
            'Bender' => <<"http://bender:8022/v1/bender">>,
            'Generator' => <<"http://bender:8022/v1/generator">>
        }},
        {deadline, 60000}
        %{retries, #{
        %    'GenerateID' => finish,
        %    'GetInternalID' => finish,
        %    '_' => finish
        %}}
    ]},

    {prometheus, [
        {collectors, [default]}
    ]}

].
